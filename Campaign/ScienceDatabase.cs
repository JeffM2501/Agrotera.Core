using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Agrotera.Core;
using Agrotera.Core.Types;

namespace Agrotera.Setting
{
    public class ScienceDatabase
    {
        public Campaign HostCampaign = null;

        public bool AutoGenerateDBEntriesForEntities = true;
        public bool AutoGenerateDBEntriesFactions = true;

        public Dictionary<UInt64, ScienceDatabaseItem> Items = new Dictionary<UInt64, ScienceDatabaseItem>();
        internal Dictionary<string, List<ScienceDatabaseItem>> Categories = new Dictionary<string, List<ScienceDatabaseItem>>();

        public class ChangeEventArgs : EventArgs
        {
            public ScienceDatabaseItem DBItem = null;

            public ChangeEventArgs(ScienceDatabaseItem dbItem)
            {
                DBItem = dbItem;
            }
        }
        public event EventHandler<ChangeEventArgs> ItemAdded;
        public event EventHandler<ChangeEventArgs> ItemRemoved;
        public event EventHandler<ChangeEventArgs> ItemUpdated;

        public ScienceDatabase(Campaign host)
        {
            HostCampaign = host;
        }

        private UInt64 NewID()
        {
            UInt64 id = Utilities.RandomUInt64();
            while (Items.ContainsKey(id))
                id = Utilities.RandomUInt64();

            return id;
        }

        public ScienceDatabaseItem New(string category, string name)
        {
            ScienceDatabaseItem i = Find(name);
            if (i != null)
                return i;

            i = new ScienceDatabaseItem();
            i.Name = name.ToUpperInvariant();
            i.DisplayName = name;
            i.ID = NewID();
            i.Dirtied += i_Dirtied;
            i.Category = category;

            Items.Add(i.ID, i);

            string catUpper = category.ToUpperInvariant();

            if (!Categories.ContainsKey(catUpper))
                Categories.Add(catUpper, new List<ScienceDatabaseItem>());

            Categories[catUpper].Add(i);

            if (ItemAdded != null)
                ItemAdded(this, new ChangeEventArgs(i));

            return i;
        }

        protected void i_Dirtied(object sender, EventArgs e)
        {
            ScienceDatabaseItem item = sender as ScienceDatabaseItem;
            if (item != null && ItemUpdated != null)
                ItemUpdated(this, new ChangeEventArgs(item));
        }

        public ScienceDatabaseItem Find(string name)
        {
            string upperName = name.ToUpperInvariant();
            foreach (ScienceDatabaseItem i in Items.Values)
            {
                if (i.Name == upperName)
                    return i;
            }

            return null;
        }

        public void Remove(ScienceDatabaseItem item)
        {
            if (Items.ContainsKey(item.ID))
                Items.Remove(item.ID);

            string catUpper = item.Category.ToUpperInvariant();

            if (Categories.ContainsKey(catUpper))
                Categories[catUpper].Remove(item);

            if (ItemRemoved != null)
                ItemRemoved(this, new ChangeEventArgs(item));
        }

        public void Update(ScienceDatabaseItem item)
        {
            string catUpper = item.Category.ToUpperInvariant();

            if (Items.ContainsKey(item.ID))
            {
                Categories[catUpper].Remove(Items[item.ID]);
                Items[item.ID] = item;

                if (!Categories.ContainsKey(catUpper))
                    Categories.Add(catUpper, new List<ScienceDatabaseItem>());

                Categories[catUpper].Add(item);
                i_Dirtied(item, EventArgs.Empty);
            }
            else
            {
                Items.Add(item.ID, item);

                if (!Categories.ContainsKey(catUpper))
                    Categories.Add(catUpper, new List<ScienceDatabaseItem>());

                Categories[catUpper].Add(item);

                if (ItemAdded != null)
                    ItemAdded(this, new ChangeEventArgs(item));
            }
        }
    }
}
