using System;
using System.Collections.Generic;

using Lidgren.Network;

using Agrotera.Core;
using Agrotera.Core.Entities;
using Agrotera.Setting;
using Agrotera.ShipLink;
using Agrotera.ShipLink.Messages.Join;

using SimulationServer.Peers;

namespace SimulationServer
{
	internal partial class Server : Host, PeerHandler
	{
		public Campaign TheCampaign = null;
		public Scenario TheScenario = null;

		public List<Ship> PlayerConnectedShips = new List<Ship>();

		protected MessageProcessor NewClientProcessor = new MessageProcessor();
		public Server()
		{
			NewClientProcessor.RegisterProcessor(typeof(CreateShipMessage), ProcessCreateShip);
			NewClientProcessor.RegisterProcessor(typeof(RejoinShipMessage), ProcessRejoinShip);
		}

		public void Startup(ScenarioConfig config)
		{
			DefaultPeerHandler = this;

			TheCampaign = Campaign.Get(config.CampaignName);
			TheScenario = Scenario.FindScenario(config.ScenarioName);

			TheScenario.Map = new Agrotera.Core.Areas.Zone();

			TheCampaign.Load();
			TheScenario.Load(TheCampaign);

			if(TheCampaign.ScienceDB.AutoGenerateDBEntriesForEntities)
				GenerateEntityScienceDBRecords();

			if(TheCampaign.ScienceDB.AutoGenerateDBEntriesFactions)
				GenerateFactionScienceDBRecords();

			Tick.UpdateGlobalClock();

			Listen(config.Port);
		}

		public override void Shutdown()
		{
			base.Shutdown();
		}

		public void Update()
		{

		}

		public Peer AddPeer(NetIncomingMessage msg)
		{
			ShipPeer sp = new ShipPeer();

			sp.ShipID = msg.ReadInt32();
			sp.authenticationToken = msg.ReadString();

			return sp;
		}

		public void DisconnectPeer(string reason, Peer peer)
		{
		}

		public void PeerDisconnected(string reason, Peer peer)
		{
		}

		public void PeerReceiveData(NetworkMessage msg, Peer peer)
		{
			if (!NewClientProcessor.CallProcessor(peer,msg))
			{
				ShipPeer shipPeer = peer as ShipPeer;
				if(shipPeer == null || shipPeer.LinkedShip == null || shipPeer.ShipController == null || shipPeer.ShipController.NetworkPeer != peer)
					return;

				shipPeer.ShipController.ProcessMessage(msg);
			}
		}

		protected void GenerateFactionScienceDBRecords()
		{
			foreach(var faction in TheCampaign.Factions.Values)
			{
				if(faction.ScienceDBEntry == UInt32.MaxValue)
					continue;

				ScienceDatabaseItem item = TheCampaign.ScienceDB.New("Faction", faction.Name);
				item.Generalization = ScienceDatabaseItem.ItemGeneralizations.Data;
				item.LongDescription = faction.Description;
				foreach(string enimy in faction.Enimies)
					item.AddValue(enimy, "Hostile");

				item.Known = true;
				faction.ScienceDBEntry = item.ID;
			}
		}

		protected void GenerateEntityScienceDBRecords()
		{
			foreach(var entity in TheCampaign.Templates)
			{
				if(entity.ScienceDBID == UInt64.MaxValue)
				{
					ScienceDatabaseItem item = TheCampaign.ScienceDB.New(entity.EntityClass.ToString(), entity.Name);
					item.Generalization = ScienceDatabaseItem.ItemGeneralizations.Data;
					entity.SetScienceItemFields(item);
					item.Known = true;
					entity.ScienceDBID = item.ID;
				}
			}
		}
	}
}
